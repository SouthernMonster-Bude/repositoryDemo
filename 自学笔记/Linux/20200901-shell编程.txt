cat /etc/shells

shell变量
=两边不能有空格
$变量名用于调用变量
也可${变量名}

shell参数传递
$0      当前脚本名称
$n(n>0) 第n个参数
$#      传递到脚本的个数
$*      以一个字符串显示所有向脚本传递的参数
$$      脚本运行的当前进程id
$!      后台运行的最后一个进程ID
$@      与$*相同 每个参数有引号隔开
$?      显示最后命令的退出状态，0表示没有错误，其他值表示有错误


运算
a=`expr 8 + 8`   #运算符前后要有空格
a=$((8 + 8))
a=$[8 + 8]
乘法运算用 \*

关系运算
支持数字或者纯数字字符的字符串
-eq --> '='
-gt --> '>'
-lt --> '<'
-ge --> '>='
-le --> '<='

一层[]
-a  --> 'and'
-o  --> 'or'

两层[[]]
&&  --> 'and'
||  --> 'or'

if
```
if [ $a -eq 100 -a $b -lt 90]
then
    echo ddd
else
    echo pp
fi

if [[ $a -eq 100 && $b -lt 90 ]] 
...

```

字符串运算符

=  --> 判断字符串是否相等
!= --> 判断字符串是否不相等
-z --> 长度判断是否为0
-n --> 长度判断是否为0
if中直接跟字符串 --> 判断字符串是否为空

文件运算符
-r -w ....



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


if [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi

elif

```
for n in 1 2 3
do
    echo $n
done

for((i=3;i<10;i++))
do echo $i
done

for n in 1 2 3;do echo $n;done
for n in {1..5};do echo $n;done

for((i=3;i<10;i++));do echo $i;done
```
```
1=0
while((i<3))
do
    echo $i
    let i++
done
```
```
echo '请输入一个数'
read num
case num in
    1) echo 输入了1
    ;;
    2) echo 输入了2
    ;;
    3) echo 输入了3
    ;;
    *) echo 输入了其他数
    ;;
esac
```



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[ function ] funcname [()]
{
    action;
    [return int;] # 没有return 返回最后一条指令的结果
}