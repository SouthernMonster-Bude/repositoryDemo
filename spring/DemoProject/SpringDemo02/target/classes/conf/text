 public static Integer[] fastSort(Integer[] numArr) {
        int base = numArr.length - 1;
        if (base < 0) return numArr;
        int left = 0;
//        printArr(numArr, numArr.length);
        int right = numArr.length > 1 ? numArr.length - 2 : base;
        while (left < right) {
            while (left < right && numArr[left] <= numArr[base]) left++;
            while (left < right && numArr[right] >= numArr[base]) right--;
            if (left < right && numArr[left] > numArr[base] && numArr[right] < numArr[base])
                swap(numArr, left, right);
        }
        if (numArr[left] > numArr[base]) {
            swap(numArr, base, left);
            base = left;
        } else if (numArr[right] > numArr[base]) {
            swap(numArr, base, right);
            base = right;
        }
        if (numArr.length <= 2) return numArr;
        Integer[] leftArr = subArr(numArr, 0, base - 1, Integer.class);
        Integer[] rightArr = subArr(numArr, base + 1, numArr.length - 1, Integer.class);
        Integer[] mid = {numArr[base]};
        leftArr = fastSort(leftArr);
        rightArr = fastSort(rightArr);
        return cancat(cancat(leftArr, mid, Integer.class), rightArr, Integer.class);
    }