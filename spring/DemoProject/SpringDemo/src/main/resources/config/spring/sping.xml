<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">



    <!--
      1. 使用bean节点来创建对象
          id属性标识着对象
          name属性代表着要创建对象的类全名
          scope singleton 单例 在IOC容器之前就被创建
                prototype 多例 使用的时候被创建
          lazy-init想要对象在使用的时候才创建，那么将lazy-init设置为ture就行 对单例的bean才有效果
          init-method 对象在创建后，执行某个方法
          destroy-method IOC容器销毁后，执行某个方法
      -->
    <bean id="user003" class="com.hjm.test.dto.User" />
    <bean id="userService02" class="com.hjm.test.service.auto.UserService02" autowire="byType"/>
    <bean id="user004" class="com.hjm.test.dto.User" scope="prototype">
        <!--通过constructor这个节点来指定构造函数的参数类型、名称、第几个-->
        <constructor-arg index="0" name="id" type="java.lang.String" value="004"/>
        <constructor-arg index="1" name="username" type="java.lang.String" value="ABC收到"/>
    </bean>

    <!--
      2. 工厂的方式创建Bean-->
    <!--工厂静态方法创建对象，直接使用class指向静态类，指定静态方法就行了-->
    <bean id="factory01User005" class = "com.hjm.test.factory.Factory01" factory-method="getUserBean"></bean>

    <!--工厂非静态方法创建对象-->
    <!--首先创建工厂对象-->
    <bean id="factory" class="com.hjm.test.factory.Factory01"/>
    <!--指定工厂对象和工厂方法-->
    <bean id="factory01User006" class="com.hjm.test.dto.User" factory-bean="factory" factory-method="getUserBean02"/>


    <!--    c名称空间
    我们在使用XML配置创建Bean的时候，如果该Bean有构造器，那么我们使用<constructor-arg>这个节点来对构造器的参数进行赋值...
    <constructor-arg>未免有点太长了，为了简化配置，Spring来提供了c名称空间...
    要想c名称空间是需要导入xmlns:c="http://www.springframework.org/schema/c"的-->
    <bean id="userService" class="com.hjm.test.service.UserService" c:user-ref="user003">
        <property name="user02" ref="user004"/>
    </bean>
    <!--    c名称空间有个缺点：不能装配集合Collection-->
    <bean id="userService2" class="com.hjm.test.service.UserService" >
        <constructor-arg index="0" name="user" ref="user003"/>
        <constructor-arg index="1" name="userList">
            <list>
                <value >
                </value>
            </list>
        </constructor-arg>

    </bean>

<!--    注解方式-->
<!--    通过注解来配置信息就是为了简化IOC容器的配置，注解可以把对象添加到IOC容器中、处理对象依赖关系-->
<!--    1）先引入context名称空间-->
<!--    xmlns:context="http://www.springframework.org/schema/context"-->
<!--    2）开启注解扫描器-->
    <context:component-scan base-package="com.hjm.test"></context:component-scan>

</beans>